In this project, I have done a sever which can support GET and HEAD method, also implement the keep-alive response header in order to get the bonus. The sever will return 4 different status to the client according to different conditions.
      The whole structure is 3 classes and a main function, there are two message classes, one is to hold the status message(ResponseStatus,HeaderFields), another is to include all the header we need for different cases(HttpRequestHandler).
      The thread structure is actually implemented outside the classes, it is in the global environment. Because as I thought, there might be a problem if multiple threads wants to write to the log file at the same time, which may cause crash, so I ascynchrozied the file written function, which is included in the HttpRequestHandler class. In order to solve the synchronize problem, I create two functions, the http_sever function is act as the part to do the main job which is to interact with the client, the single thread function is aiming to use loop to activate the http_sever function, if the start_sever function call the single_thread function, a connection will be built, and a thread will be created to sever the client.
       In the handler class, I have functions to find the file modify time, and to form different kinds of response message, generally, I divide them into 2 classes, one is the 200 and 304 response, and another is the error response which is 400 and 404 response, and I also have the function to dealing with the request message, return method, url and http_version, a dictionary for store the different header values respectively.All the function in handler class will be called by the http_sever function which is global.
      The sever will never stop until someone killed the process, otherwise it will keep listening to the client.